-- -- Create or replace the refresh function with a better implementation
-- CREATE OR REPLACE FUNCTION refresh_routing_form_response_denormalized()
-- RETURNS TRIGGER AS $$
-- BEGIN
--     -- Insert or update the denormalized data
--     INSERT INTO "RoutingFormResponseDenormalized" (
--         id,
--         "formId",
--         "formName",
--         "formTeamId",
--         "formUserId",
--         "bookingUid",
--         "bookingId",
--         "bookingStatus",
--         "bookingStatusOrder",
--         "bookingCreatedAt",
--         "bookingStartTime",
--         "bookingEndTime",
--         "bookingUserId",
--         "bookingUserName",
--         "bookingUserEmail",
--         "bookingUserAvatarUrl",
--         "bookingAssignmentReason",
--         "eventTypeId",
--         "eventTypeParentId",
--         "eventTypeSchedulingType",
--         "createdAt",
--         utm_source,
--         utm_medium,
--         utm_campaign,
--         utm_term,
--         utm_content
--     )
--     SELECT 
--         r.id,
--         r."formId",
--         f.name as "formName",
--         f."teamId" as "formTeamId",
--         f."userId" as "formUserId",
--         b.uid as "bookingUid",
--         b.id as "bookingId",
--         b.status as "bookingStatus",
--         calculate_booking_status_order(b.status::text) as "bookingStatusOrder",
--         b."createdAt" as "bookingCreatedAt",
--         b."startTime" as "bookingStartTime",
--         b."endTime" as "bookingEndTime",
--         b."userId" as "bookingUserId",
--         u.name as "bookingUserName",
--         u.email as "bookingUserEmail",
--         u."avatarUrl" as "bookingUserAvatarUrl",
--         COALESCE(
--             (
--                 SELECT ar."reasonString"
--                 FROM "AssignmentReason" ar
--                 WHERE ar."bookingId" = b.id
--                 LIMIT 1
--             ),
--             ''
--         ) as "bookingAssignmentReason",
--         et.id as "eventTypeId",
--         et."parentId" as "eventTypeParentId",
--         et."schedulingType" as "eventTypeSchedulingType",
--         r."createdAt",
--         t.utm_source,
--         t.utm_medium,
--         t.utm_campaign,
--         t.utm_term,
--         t.utm_content
--     FROM "App_RoutingForms_FormResponse" r
--     LEFT JOIN "App_RoutingForms_Form" f ON r."formId" = f.id
--     LEFT JOIN "Booking" b ON b.uid = r."routedToBookingUid"
--     LEFT JOIN "EventType" et ON b."eventTypeId" = et.id
--     LEFT JOIN "users" u ON b."userId" = u.id
--     LEFT JOIN "Tracking" t ON t."bookingId" = b.id
--     WHERE r.id = NEW.id
--     ON CONFLICT (id) DO UPDATE SET
--         "formId" = EXCLUDED."formId",
--         "formName" = EXCLUDED."formName",
--         "formTeamId" = EXCLUDED."formTeamId",
--         "formUserId" = EXCLUDED."formUserId",
--         "bookingUid" = EXCLUDED."bookingUid",
--         "bookingId" = EXCLUDED."bookingId",
--         "bookingStatus" = EXCLUDED."bookingStatus",
--         "bookingStatusOrder" = EXCLUDED."bookingStatusOrder",
--         "bookingCreatedAt" = EXCLUDED."bookingCreatedAt",
--         "bookingStartTime" = EXCLUDED."bookingStartTime",
--         "bookingEndTime" = EXCLUDED."bookingEndTime",
--         "bookingUserId" = EXCLUDED."bookingUserId",
--         "bookingUserName" = EXCLUDED."bookingUserName",
--         "bookingUserEmail" = EXCLUDED."bookingUserEmail",
--         "bookingUserAvatarUrl" = EXCLUDED."bookingUserAvatarUrl",
--         "bookingAssignmentReason" = EXCLUDED."bookingAssignmentReason",
--         "eventTypeId" = EXCLUDED."eventTypeId",
--         "eventTypeParentId" = EXCLUDED."eventTypeParentId",
--         "eventTypeSchedulingType" = EXCLUDED."eventTypeSchedulingType",
--         "createdAt" = EXCLUDED."createdAt",
--         utm_source = EXCLUDED.utm_source,
--         utm_medium = EXCLUDED.utm_medium,
--         utm_campaign = EXCLUDED.utm_campaign,
--         utm_term = EXCLUDED.utm_term,
--         utm_content = EXCLUDED.utm_content;
--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;

-- -- Drop and recreate triggers to ensure they're using the latest function version
-- DROP TRIGGER IF EXISTS routing_form_response_insert_update_trigger ON "App_RoutingForms_FormResponse";
-- DROP TRIGGER IF EXISTS routing_form_response_delete_trigger ON "App_RoutingForms_FormResponse";

-- CREATE TRIGGER routing_form_response_insert_update_trigger
--     AFTER INSERT OR UPDATE ON "App_RoutingForms_FormResponse"
--     FOR EACH ROW
--     EXECUTE FUNCTION refresh_routing_form_response_denormalized();

-- CREATE TRIGGER routing_form_response_delete_trigger
--     BEFORE DELETE ON "App_RoutingForms_FormResponse"
--     FOR EACH ROW
--     EXECUTE FUNCTION trigger_delete_routing_form_response_denormalized();

-- -- Refresh all existing responses
-- DO $$
-- DECLARE
--     r RECORD;
-- BEGIN
--     FOR r IN SELECT id FROM "App_RoutingForms_FormResponse"
--     LOOP
--         INSERT INTO "RoutingFormResponseDenormalized" (
--             id,
--             "formId",
--             "formName",
--             "formTeamId",
--             "formUserId",
--             "bookingUid",
--             "bookingId",
--             "bookingStatus",
--             "bookingStatusOrder",
--             "bookingCreatedAt",
--             "bookingStartTime",
--             "bookingEndTime",
--             "bookingUserId",
--             "bookingUserName",
--             "bookingUserEmail",
--             "bookingUserAvatarUrl",
--             "bookingAssignmentReason",
--             "eventTypeId",
--             "eventTypeParentId",
--             "eventTypeSchedulingType",
--             "createdAt",
--             utm_source,
--             utm_medium,
--             utm_campaign,
--             utm_term,
--             utm_content
--         )
--         SELECT 
--             r2.id,
--             r2."formId",
--             f.name as "formName",
--             f."teamId" as "formTeamId",
--             f."userId" as "formUserId",
--             b.uid as "bookingUid",
--             b.id as "bookingId",
--             b.status as "bookingStatus",
--             calculate_booking_status_order(b.status::text) as "bookingStatusOrder",
--             b."createdAt" as "bookingCreatedAt",
--             b."startTime" as "bookingStartTime",
--             b."endTime" as "bookingEndTime",
--             b."userId" as "bookingUserId",
--             u.name as "bookingUserName",
--             u.email as "bookingUserEmail",
--             u."avatarUrl" as "bookingUserAvatarUrl",
--             COALESCE(
--                 (
--                     SELECT ar."reasonString"
--                     FROM "AssignmentReason" ar
--                     WHERE ar."bookingId" = b.id
--                     LIMIT 1
--                 ),
--                 ''
--             ) as "bookingAssignmentReason",
--             et.id as "eventTypeId",
--             et."parentId" as "eventTypeParentId",
--             et."schedulingType" as "eventTypeSchedulingType",
--             r2."createdAt",
--             t.utm_source,
--             t.utm_medium,
--             t.utm_campaign,
--             t.utm_term,
--             t.utm_content
--         FROM "App_RoutingForms_FormResponse" r2
--         LEFT JOIN "App_RoutingForms_Form" f ON r2."formId" = f.id
--         LEFT JOIN "Booking" b ON b.uid = r2."routedToBookingUid"
--         LEFT JOIN "EventType" et ON b."eventTypeId" = et.id
--         LEFT JOIN "users" u ON b."userId" = u.id
--         LEFT JOIN "Tracking" t ON t."bookingId" = b.id
--         WHERE r2.id = r.id
--         ON CONFLICT (id) DO UPDATE SET
--             "formId" = EXCLUDED."formId",
--             "formName" = EXCLUDED."formName",
--             "formTeamId" = EXCLUDED."formTeamId",
--             "formUserId" = EXCLUDED."formUserId",
--             "bookingUid" = EXCLUDED."bookingUid",
--             "bookingId" = EXCLUDED."bookingId",
--             "bookingStatus" = EXCLUDED."bookingStatus",
--             "bookingStatusOrder" = EXCLUDED."bookingStatusOrder",
--             "bookingCreatedAt" = EXCLUDED."bookingCreatedAt",
--             "bookingStartTime" = EXCLUDED."bookingStartTime",
--             "bookingEndTime" = EXCLUDED."bookingEndTime",
--             "bookingUserId" = EXCLUDED."bookingUserId",
--             "bookingUserName" = EXCLUDED."bookingUserName",
--             "bookingUserEmail" = EXCLUDED."bookingUserEmail",
--             "bookingUserAvatarUrl" = EXCLUDED."bookingUserAvatarUrl",
--             "bookingAssignmentReason" = EXCLUDED."bookingAssignmentReason",
--             "eventTypeId" = EXCLUDED."eventTypeId",
--             "eventTypeParentId" = EXCLUDED."eventTypeParentId",
--             "eventTypeSchedulingType" = EXCLUDED."eventTypeSchedulingType",
--             "createdAt" = EXCLUDED."createdAt",
--             utm_source = EXCLUDED.utm_source,
--             utm_medium = EXCLUDED.utm_medium,
--             utm_campaign = EXCLUDED.utm_campaign,
--             utm_term = EXCLUDED.utm_term,
--             utm_content = EXCLUDED.utm_content;
--     END LOOP;
-- END $$; 